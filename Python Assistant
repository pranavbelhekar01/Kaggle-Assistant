{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f2266d04",
   "metadata": {
    "papermill": {
     "duration": 0.008449,
     "end_time": "2024-04-17T08:28:20.521427",
     "exception": false,
     "start_time": "2024-04-17T08:28:20.512978",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Python Language Assistant Using Gemma"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "810c303c",
   "metadata": {
    "papermill": {
     "duration": 0.007568,
     "end_time": "2024-04-17T08:28:20.537135",
     "exception": false,
     "start_time": "2024-04-17T08:28:20.529567",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "![](https://ai.google.dev/static/site-assets/images/marketing/gemma.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "19f7691f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T08:28:20.554426Z",
     "iopub.status.busy": "2024-04-17T08:28:20.554048Z",
     "iopub.status.idle": "2024-04-17T08:28:35.111269Z",
     "shell.execute_reply": "2024-04-17T08:28:35.110227Z"
    },
    "papermill": {
     "duration": 14.568673,
     "end_time": "2024-04-17T08:28:35.113622",
     "exception": false,
     "start_time": "2024-04-17T08:28:20.544949",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-04-17 08:28:22.381775: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-04-17 08:28:22.381885: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-04-17 08:28:22.523658: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import keras_nlp\n",
    "import keras\n",
    "import os\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b684f02",
   "metadata": {
    "papermill": {
     "duration": 0.00738,
     "end_time": "2024-04-17T08:28:35.128960",
     "exception": false,
     "start_time": "2024-04-17T08:28:35.121580",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Sets environment variables using the `os.environ` dictionary. \n",
    "\n",
    "- `os.environ[\"KERAS_BACKEND\"] = \"jax\"`: This line sets the environment variable `KERAS_BACKEND` to `\"jax\"`. This indicates that Keras, a deep learning library, should use the JAX backend for computation.\n",
    "\n",
    "- `os.environ[\"XLA_PYTHON_CLIENT_MEM_FRACTION\"]=\"1.00\"`: This line sets the environment variable `XLA_PYTHON_CLIENT_MEM_FRACTION` to `\"1.00\"`. This environment variable is used by XLA (Accelerated Linear Algebra), a domain-specific compiler for linear algebra operations, to control the fraction of available memory that the XLA Python client will use on a TPU (Tensor Processing Unit).\n",
    "\n",
    "Using these environment variables, the code configures the backend for Keras to use JAX and sets the memory fraction for the XLA Python client to 100%. These configurations are crucial for optimizing performance and memory usage when running deep learning models, especially on TPUs.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bff69164",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T08:28:35.145507Z",
     "iopub.status.busy": "2024-04-17T08:28:35.144940Z",
     "iopub.status.idle": "2024-04-17T08:28:35.149562Z",
     "shell.execute_reply": "2024-04-17T08:28:35.148694Z"
    },
    "papermill": {
     "duration": 0.015027,
     "end_time": "2024-04-17T08:28:35.151456",
     "exception": false,
     "start_time": "2024-04-17T08:28:35.136429",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "os.environ[\"KERAS_BACKEND\"] = \"jax\"\n",
    "os.environ[\"XLA_PYTHON_CLIENT_MEM_FRACTION\"]=\"1.00\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2ab8c34",
   "metadata": {
    "papermill": {
     "duration": 0.008163,
     "end_time": "2024-04-17T08:28:35.166779",
     "exception": false,
     "start_time": "2024-04-17T08:28:35.158616",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Initializes a language model object named `gemma_lm` using the GemmaCausalLM class from a library, possibly keras_nlp. It creates the model from a preset configuration named \"gemma_2b_en\". This preset likely contains predefined settings, architecture configurations, and pretrained weights optimized for a specific task or language, in this case, possibly English text generation or understanding."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ab5491e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T08:28:35.183161Z",
     "iopub.status.busy": "2024-04-17T08:28:35.182460Z",
     "iopub.status.idle": "2024-04-17T08:29:37.797628Z",
     "shell.execute_reply": "2024-04-17T08:29:37.796660Z"
    },
    "papermill": {
     "duration": 62.625944,
     "end_time": "2024-04-17T08:29:37.800166",
     "exception": false,
     "start_time": "2024-04-17T08:28:35.174222",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Attaching 'config.json' from model 'keras/gemma/keras/gemma_2b_en/2' to your Kaggle notebook...\n",
      "Attaching 'config.json' from model 'keras/gemma/keras/gemma_2b_en/2' to your Kaggle notebook...\n",
      "Attaching 'model.weights.h5' from model 'keras/gemma/keras/gemma_2b_en/2' to your Kaggle notebook...\n",
      "Attaching 'tokenizer.json' from model 'keras/gemma/keras/gemma_2b_en/2' to your Kaggle notebook...\n",
      "Attaching 'assets/tokenizer/vocabulary.spm' from model 'keras/gemma/keras/gemma_2b_en/2' to your Kaggle notebook...\n",
      "normalizer.cc(51) LOG(INFO) precompiled_charsmap is empty. use identity normalization.\n"
     ]
    }
   ],
   "source": [
    "gemma_lm = keras_nlp.models.GemmaCausalLM.from_preset(\"gemma_2b_en\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7dae045c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T08:29:37.819290Z",
     "iopub.status.busy": "2024-04-17T08:29:37.818605Z",
     "iopub.status.idle": "2024-04-17T08:29:37.853053Z",
     "shell.execute_reply": "2024-04-17T08:29:37.852071Z"
    },
    "papermill": {
     "duration": 0.046222,
     "end_time": "2024-04-17T08:29:37.855185",
     "exception": false,
     "start_time": "2024-04-17T08:29:37.808963",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Preprocessor: \"gemma_causal_lm_preprocessor\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mPreprocessor: \"gemma_causal_lm_preprocessor\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Tokenizer (type)                                   </span>┃<span style=\"font-weight: bold\">                                             Vocab # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ gemma_tokenizer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GemmaTokenizer</span>)                   │                                             <span style=\"color: #00af00; text-decoration-color: #00af00\">256,000</span> │\n",
       "└────────────────────────────────────────────────────┴─────────────────────────────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mTokenizer (type)                                  \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m                                            Vocab #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ gemma_tokenizer (\u001b[38;5;33mGemmaTokenizer\u001b[0m)                   │                                             \u001b[38;5;34m256,000\u001b[0m │\n",
       "└────────────────────────────────────────────────────┴─────────────────────────────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"gemma_causal_lm\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"gemma_causal_lm\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                  </span>┃<span style=\"font-weight: bold\"> Output Shape              </span>┃<span style=\"font-weight: bold\">         Param # </span>┃<span style=\"font-weight: bold\"> Connected to               </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ padding_mask (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_ids (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ gemma_backbone                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)        │   <span style=\"color: #00af00; text-decoration-color: #00af00\">2,506,172,416</span> │ padding_mask[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],        │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GemmaBackbone</span>)               │                           │                 │ token_ids[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_embedding               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256000</span>)      │     <span style=\"color: #00af00; text-decoration-color: #00af00\">524,288,000</span> │ gemma_backbone[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]       │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReversibleEmbedding</span>)         │                           │                 │                            │\n",
       "└───────────────────────────────┴───────────────────────────┴─────────────────┴────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                 \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to              \u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ padding_mask (\u001b[38;5;33mInputLayer\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_ids (\u001b[38;5;33mInputLayer\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ gemma_backbone                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)        │   \u001b[38;5;34m2,506,172,416\u001b[0m │ padding_mask[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],        │\n",
       "│ (\u001b[38;5;33mGemmaBackbone\u001b[0m)               │                           │                 │ token_ids[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_embedding               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256000\u001b[0m)      │     \u001b[38;5;34m524,288,000\u001b[0m │ gemma_backbone[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]       │\n",
       "│ (\u001b[38;5;33mReversibleEmbedding\u001b[0m)         │                           │                 │                            │\n",
       "└───────────────────────────────┴───────────────────────────┴─────────────────┴────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,506,172,416</span> (9.34 GB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m2,506,172,416\u001b[0m (9.34 GB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,506,172,416</span> (9.34 GB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m2,506,172,416\u001b[0m (9.34 GB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gemma_lm.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27eb7ef7",
   "metadata": {
    "papermill": {
     "duration": 0.009848,
     "end_time": "2024-04-17T08:29:37.875093",
     "exception": false,
     "start_time": "2024-04-17T08:29:37.865245",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This function, get_prompt(query:str)->str, takes a query string as input and returns a prompt string. It formats the prompt using a template string with placeholders for instruction and response. The instruction part is filled with the input query, while the response part is left empty initially."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d7eead0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T08:29:37.896327Z",
     "iopub.status.busy": "2024-04-17T08:29:37.895983Z",
     "iopub.status.idle": "2024-04-17T08:29:37.900947Z",
     "shell.execute_reply": "2024-04-17T08:29:37.900029Z"
    },
    "papermill": {
     "duration": 0.01804,
     "end_time": "2024-04-17T08:29:37.902909",
     "exception": false,
     "start_time": "2024-04-17T08:29:37.884869",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_prompt(query:str)->str:\n",
    "    template = \"Instruction:\\n{instruction}\\n\\nResponse:\\n{response}\"\n",
    "    prompt = template.format(\n",
    "        instruction=query,\n",
    "        response=\"\",\n",
    "    )\n",
    "    return prompt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "134a73c8",
   "metadata": {
    "papermill": {
     "duration": 0.009919,
     "end_time": "2024-04-17T08:29:37.922863",
     "exception": false,
     "start_time": "2024-04-17T08:29:37.912944",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "In this code, a TopKSampler object named 'sampler' is created with a parameter k=5 indicating that it will sample from the top 5 likely tokens during text generation. The seed parameter is set to 2 for reproducibility.\n",
    "\n",
    "Then, the Gemma language model 'gemma_lm' is compiled with the sampler object using gemma_lm.compile(sampler=sampler). This likely configures the language model for text generation using the specified sampling strategy.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3cce3ddc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T08:29:37.944166Z",
     "iopub.status.busy": "2024-04-17T08:29:37.943823Z",
     "iopub.status.idle": "2024-04-17T08:29:37.955409Z",
     "shell.execute_reply": "2024-04-17T08:29:37.954612Z"
    },
    "papermill": {
     "duration": 0.024941,
     "end_time": "2024-04-17T08:29:37.957435",
     "exception": false,
     "start_time": "2024-04-17T08:29:37.932494",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "sampler = keras_nlp.samplers.TopKSampler(k=5, seed=2)\n",
    "gemma_lm.compile(sampler=sampler)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5fb64268",
   "metadata": {
    "papermill": {
     "duration": 0.009771,
     "end_time": "2024-04-17T08:29:37.977042",
     "exception": false,
     "start_time": "2024-04-17T08:29:37.967271",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Testing Before Tuning\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "164d2aa7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T08:29:37.998804Z",
     "iopub.status.busy": "2024-04-17T08:29:37.997902Z",
     "iopub.status.idle": "2024-04-17T08:30:13.689939Z",
     "shell.execute_reply": "2024-04-17T08:30:13.688772Z"
    },
    "papermill": {
     "duration": 35.714491,
     "end_time": "2024-04-17T08:30:13.701912",
     "exception": false,
     "start_time": "2024-04-17T08:29:37.987421",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1713342601.705507      26 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n",
      "W0000 00:00:1713342601.770673      26 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n",
      "W0000 00:00:1713342602.031343      26 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instruction:\n",
      "What are list comprehensions in Python?\n",
      "\n",
      "Response:\n",
      "List comprehensions are a Python feature that allow you to generate a\n",
      "list from a list comprehension.\n",
      "\n",
      "Syntax:\n",
      "\n",
      "list_comprehension = [expression for expression in iterable]\n",
      "\n",
      "Example:\n",
      "What is list comprehensions and when to use it?\n",
      "\n",
      "Response:\n",
      "The list comprehension is a concise way to build a new list from an\n",
      "iterable (a sequence or a generator).\n",
      "\n",
      "Example:\n",
      "\n",
      "# List Comprehension\n",
      "# This code creates a new list using the list comprehension\n",
      "# syntax\n",
      "# [item * 2 for item in [1,2,3,4,5,6,7,8,9]]\n",
      "\n",
      "# The result of this operation would be\n",
      "[item * 2 for item in [1,2,3,4,5,6,7,8,9]] = [2,4,6,8,10,12,14,16,18]\n",
      "\n",
      "# List Comprehension with a list\n",
      "# In this case we have an iterable which is a list,\n",
      "# we can use list comprehension to create a new list.\n",
      "# The result of this operation would be\n",
      "# [item * 2 for item in [2,4,6,8,10,12,14,16,18,20]] = [4,8,12,16,20,24,28,32,36,40]\n",
      "\n",
      "# List Comprehension using a dictionary\n",
      "# Here we have a dictionary,\n",
      "# we can use list comprehension to create a new dictionary\n",
      "# The result of this operation would be\n",
      "# {key: value * 2 for key, value in [('a', 1), ('b', 2), ('c', 3), ('d', 4)]} = {('a', 2), ('b', 4), ('c', 6), ('d', 8)}\n",
      "\n",
      "# List Comprehension Using a generator\n",
      "# Here we have a generator,\n",
      "# we can use list comprehension to create a new generator\n",
      "# The result of this operation would be\n",
      "# (key * 2 for key in [2, 4, 6, 8, 10, 12, 14, 16, 18]) = 2, 4, 6, 8, 1\n"
     ]
    }
   ],
   "source": [
    "prompt = get_prompt(\"What are list comprehensions in Python?\")\n",
    "print(gemma_lm.generate(prompt, max_length=512))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "910b342e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T08:30:13.722159Z",
     "iopub.status.busy": "2024-04-17T08:30:13.721854Z",
     "iopub.status.idle": "2024-04-17T08:30:15.506545Z",
     "shell.execute_reply": "2024-04-17T08:30:15.505085Z"
    },
    "papermill": {
     "duration": 1.797243,
     "end_time": "2024-04-17T08:30:15.508825",
     "exception": false,
     "start_time": "2024-04-17T08:30:13.711582",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instruction:\n",
      "How to implement a stack in Python?\n",
      "\n",
      "Response:\n",
      "The implementation of a stack in Python is straightforward. We can implement it using a list.\n",
      "\n",
      "Here is the list of steps:\n",
      "\n",
      "1. Create a list called stack.\n",
      "\n",
      "2. Define an empty stack.\n",
      "\n",
      "3. Push the element onto the list.\n",
      "\n",
      "4. Pop an element off the list.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "prompt = get_prompt(\"How to implement a stack in Python?\")\n",
    "print(gemma_lm.generate(prompt, max_length=512))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58965c9b",
   "metadata": {
    "papermill": {
     "duration": 0.010018,
     "end_time": "2024-04-17T08:30:15.529138",
     "exception": false,
     "start_time": "2024-04-17T08:30:15.519120",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Reading Sample Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "29df0b37",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T08:30:15.551090Z",
     "iopub.status.busy": "2024-04-17T08:30:15.550329Z",
     "iopub.status.idle": "2024-04-17T08:30:51.615823Z",
     "shell.execute_reply": "2024-04-17T08:30:51.614968Z"
    },
    "papermill": {
     "duration": 36.078947,
     "end_time": "2024-04-17T08:30:51.618250",
     "exception": false,
     "start_time": "2024-04-17T08:30:15.539303",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#questions table\n",
    "df_questions = pd.read_csv('../input/pythonquestions/Questions.csv',\n",
    "                            encoding = \"ISO-8859-1\",\n",
    "                            usecols = ['Id','Score','Title'])\n",
    "#answers table\n",
    "df_answers = pd.read_csv('../input/pythonquestions/Answers.csv',\n",
    "                            encoding = \"ISO-8859-1\",\n",
    "                            usecols = ['ParentId','Score','Body'],#parent id links to the questions table\n",
    "                            )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a758a563",
   "metadata": {
    "papermill": {
     "duration": 0.009889,
     "end_time": "2024-04-17T08:30:51.638779",
     "exception": false,
     "start_time": "2024-04-17T08:30:51.628890",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Sorting for threshold score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5ce8cc97",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T08:30:51.661083Z",
     "iopub.status.busy": "2024-04-17T08:30:51.660669Z",
     "iopub.status.idle": "2024-04-17T08:30:51.701864Z",
     "shell.execute_reply": "2024-04-17T08:30:51.700933Z"
    },
    "papermill": {
     "duration": 0.055206,
     "end_time": "2024-04-17T08:30:51.704260",
     "exception": false,
     "start_time": "2024-04-17T08:30:51.649054",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_questions = df_questions[df_questions['Score'] > 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9f719e91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T08:30:51.726386Z",
     "iopub.status.busy": "2024-04-17T08:30:51.725640Z",
     "iopub.status.idle": "2024-04-17T08:30:51.989571Z",
     "shell.execute_reply": "2024-04-17T08:30:51.988759Z"
    },
    "papermill": {
     "duration": 0.277817,
     "end_time": "2024-04-17T08:30:51.992424",
     "exception": false,
     "start_time": "2024-04-17T08:30:51.714607",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_answers = df_answers[df_answers['Score'] > 0]\\\n",
    "    .sort_values('Score',ascending=False)\\\n",
    "    .drop_duplicates(subset=['ParentId'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f8666eb5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T08:30:52.015072Z",
     "iopub.status.busy": "2024-04-17T08:30:52.014699Z",
     "iopub.status.idle": "2024-04-17T08:30:52.236721Z",
     "shell.execute_reply": "2024-04-17T08:30:52.235888Z"
    },
    "papermill": {
     "duration": 0.236411,
     "end_time": "2024-04-17T08:30:52.239123",
     "exception": false,
     "start_time": "2024-04-17T08:30:52.002712",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "qa = df_questions.merge(df_answers,left_on = 'Id', right_on = 'ParentId')\\\n",
    "    .rename(columns={'Title':'Question','Body':'Answer'})[['Question','Answer','Score_x']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c19c7d41",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T08:30:52.262127Z",
     "iopub.status.busy": "2024-04-17T08:30:52.261701Z",
     "iopub.status.idle": "2024-04-17T08:30:52.309764Z",
     "shell.execute_reply": "2024-04-17T08:30:52.308979Z"
    },
    "papermill": {
     "duration": 0.062326,
     "end_time": "2024-04-17T08:30:52.312182",
     "exception": false,
     "start_time": "2024-04-17T08:30:52.249856",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "qa = qa.sort_values(\"Score_x\",ascending=False).head(1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b5fc7d55",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T08:30:52.334985Z",
     "iopub.status.busy": "2024-04-17T08:30:52.334662Z",
     "iopub.status.idle": "2024-04-17T08:30:52.409262Z",
     "shell.execute_reply": "2024-04-17T08:30:52.408130Z"
    },
    "papermill": {
     "duration": 0.088717,
     "end_time": "2024-04-17T08:30:52.411772",
     "exception": false,
     "start_time": "2024-04-17T08:30:52.323055",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = []\n",
    "for index, row in qa.iterrows():\n",
    "    train.append(f\"Question:\\n{row['Question']}\\n\\nAnswer:\\n{row['Answer']}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9a2a1bca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T08:30:52.433904Z",
     "iopub.status.busy": "2024-04-17T08:30:52.433557Z",
     "iopub.status.idle": "2024-04-17T08:30:52.570658Z",
     "shell.execute_reply": "2024-04-17T08:30:52.569807Z"
    },
    "papermill": {
     "duration": 0.150948,
     "end_time": "2024-04-17T08:30:52.573267",
     "exception": false,
     "start_time": "2024-04-17T08:30:52.422319",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "gemma_lm.backbone.enable_lora(rank=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9389bb60",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T08:30:52.597174Z",
     "iopub.status.busy": "2024-04-17T08:30:52.596331Z",
     "iopub.status.idle": "2024-04-17T08:30:52.884680Z",
     "shell.execute_reply": "2024-04-17T08:30:52.883708Z"
    },
    "papermill": {
     "duration": 0.302529,
     "end_time": "2024-04-17T08:30:52.886840",
     "exception": false,
     "start_time": "2024-04-17T08:30:52.584311",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Preprocessor: \"gemma_causal_lm_preprocessor\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mPreprocessor: \"gemma_causal_lm_preprocessor\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Tokenizer (type)                                   </span>┃<span style=\"font-weight: bold\">                                             Vocab # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ gemma_tokenizer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GemmaTokenizer</span>)                   │                                             <span style=\"color: #00af00; text-decoration-color: #00af00\">256,000</span> │\n",
       "└────────────────────────────────────────────────────┴─────────────────────────────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mTokenizer (type)                                  \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m                                            Vocab #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ gemma_tokenizer (\u001b[38;5;33mGemmaTokenizer\u001b[0m)                   │                                             \u001b[38;5;34m256,000\u001b[0m │\n",
       "└────────────────────────────────────────────────────┴─────────────────────────────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"gemma_causal_lm\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"gemma_causal_lm\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                  </span>┃<span style=\"font-weight: bold\"> Output Shape              </span>┃<span style=\"font-weight: bold\">         Param # </span>┃<span style=\"font-weight: bold\"> Connected to               </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ padding_mask (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_ids (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ gemma_backbone                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)        │   <span style=\"color: #00af00; text-decoration-color: #00af00\">2,507,536,384</span> │ padding_mask[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],        │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GemmaBackbone</span>)               │                           │                 │ token_ids[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_embedding               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256000</span>)      │     <span style=\"color: #00af00; text-decoration-color: #00af00\">524,288,000</span> │ gemma_backbone[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]       │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReversibleEmbedding</span>)         │                           │                 │                            │\n",
       "└───────────────────────────────┴───────────────────────────┴─────────────────┴────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                 \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to              \u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ padding_mask (\u001b[38;5;33mInputLayer\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_ids (\u001b[38;5;33mInputLayer\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ gemma_backbone                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)        │   \u001b[38;5;34m2,507,536,384\u001b[0m │ padding_mask[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],        │\n",
       "│ (\u001b[38;5;33mGemmaBackbone\u001b[0m)               │                           │                 │ token_ids[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_embedding               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256000\u001b[0m)      │     \u001b[38;5;34m524,288,000\u001b[0m │ gemma_backbone[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]       │\n",
       "│ (\u001b[38;5;33mReversibleEmbedding\u001b[0m)         │                           │                 │                            │\n",
       "└───────────────────────────────┴───────────────────────────┴─────────────────┴────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,507,536,384</span> (9.34 GB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m2,507,536,384\u001b[0m (9.34 GB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,363,968</span> (5.20 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m1,363,968\u001b[0m (5.20 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,506,172,416</span> (9.34 GB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m2,506,172,416\u001b[0m (9.34 GB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gemma_lm.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dbf0bf88",
   "metadata": {
    "papermill": {
     "duration": 0.011286,
     "end_time": "2024-04-17T08:30:52.909464",
     "exception": false,
     "start_time": "2024-04-17T08:30:52.898178",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Fine tuning using LoRA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a16c6dca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T08:30:52.933383Z",
     "iopub.status.busy": "2024-04-17T08:30:52.933035Z",
     "iopub.status.idle": "2024-04-17T08:35:03.190952Z",
     "shell.execute_reply": "2024-04-17T08:35:03.189958Z"
    },
    "papermill": {
     "duration": 250.272553,
     "end_time": "2024-04-17T08:35:03.193003",
     "exception": false,
     "start_time": "2024-04-17T08:30:52.920450",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1713342696.664290      70 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m250s\u001b[0m 206ms/step - loss: 1.5442 - sparse_categorical_accuracy: 0.6542\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.src.callbacks.history.History at 0x7c8ed02e94b0>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Limit the input sequence length to 128 (to control memory usage).\n",
    "gemma_lm.preprocessor.sequence_length = 128\n",
    "# Use AdamW (a common optimizer for transformer models).\n",
    "optimizer = keras.optimizers.AdamW(\n",
    "    learning_rate=5e-5,\n",
    "    weight_decay=0.01,\n",
    ")\n",
    "# Exclude layernorm and bias terms from decay.\n",
    "optimizer.exclude_from_weight_decay(var_names=[\"bias\", \"scale\"])\n",
    "\n",
    "gemma_lm.compile(\n",
    "    loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n",
    "    optimizer=optimizer,\n",
    "    weighted_metrics=[keras.metrics.SparseCategoricalAccuracy()],\n",
    ")\n",
    "gemma_lm.fit(train, epochs=1, batch_size=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a7acb45",
   "metadata": {
    "papermill": {
     "duration": 0.095149,
     "end_time": "2024-04-17T08:35:03.390011",
     "exception": false,
     "start_time": "2024-04-17T08:35:03.294862",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Testing after tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0d3f9135",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T08:35:03.580963Z",
     "iopub.status.busy": "2024-04-17T08:35:03.580221Z",
     "iopub.status.idle": "2024-04-17T08:35:28.372137Z",
     "shell.execute_reply": "2024-04-17T08:35:28.370605Z"
    },
    "papermill": {
     "duration": 24.891533,
     "end_time": "2024-04-17T08:35:28.374506",
     "exception": false,
     "start_time": "2024-04-17T08:35:03.482973",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1713342926.820974      26 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n",
      "W0000 00:00:1713342927.092585      26 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instruction:\n",
      "What are list comprehensions in Python?\n",
      "\n",
      "Response:\n",
      "A list comprehension is a way to create a list from an existing one or from a set of values. It is a concise way to write code that builds new lists.\n",
      "\n",
      "Syntax:\n",
      "\n",
      "    [ expression for item in iterable ]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "prompt = get_prompt(\"What are list comprehensions in Python?\")\n",
    "print(gemma_lm.generate(prompt, max_length=512))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "5eaceab1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T08:35:28.569644Z",
     "iopub.status.busy": "2024-04-17T08:35:28.568867Z",
     "iopub.status.idle": "2024-04-17T08:35:31.637787Z",
     "shell.execute_reply": "2024-04-17T08:35:31.636406Z"
    },
    "papermill": {
     "duration": 3.168844,
     "end_time": "2024-04-17T08:35:31.640363",
     "exception": false,
     "start_time": "2024-04-17T08:35:28.471519",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instruction:\n",
      "How to implement a stack in Python?\n",
      "\n",
      "Response:\n",
      "The Python standard library provides a stack class in the built-in module <b>collections</b>.\n",
      "\n",
      "To create a new stack object, you can use <b>collections.deque</b> with a default capacity:\n",
      "\n",
      "import collections\n",
      "stack = collections.deque()\n",
      "\n",
      "If the size of the stack is greater than or equal to the capacity of <b>deque</b>, then <b>deque</b> will use a <b>list</b> as the underlying collection. This can be useful if you don't care about the order of elements.\n"
     ]
    }
   ],
   "source": [
    "prompt = get_prompt(\"How to implement a stack in Python?\")\n",
    "print(gemma_lm.generate(prompt, max_length=512))"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "databundleVersionId": 7669720,
     "sourceId": 64148,
     "sourceType": "competition"
    },
    {
     "datasetId": 262,
     "sourceId": 726715,
     "sourceType": "datasetVersion"
    },
    {
     "modelInstanceId": 5171,
     "sourceId": 11371,
     "sourceType": "modelInstanceVersion"
    }
   ],
   "dockerImageVersionId": 30674,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 437.447639,
   "end_time": "2024-04-17T08:35:35.053139",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-17T08:28:17.605500",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
